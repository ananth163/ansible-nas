---
- name: Start Dockge
  block:
    - name: Create Dockge Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ dockge_data_directory }}"
        - "{{ dockge_stacks_directory }}"

    - name: Dockge Docker Container for external
      community.docker.docker_container:
        name: "{{ dockge_container_name }}"
        image: "{{ dockge_image_name }}:{{ dockge_image_version }}"
        pull: true
        volumes:
          - "{{ dockge_data_directory }}:/app/data:rw"
          - "/var/run/docker.sock:/var/run/docker.sock:ro"
          - "{{ dockge_stacks_directory }}:{{ dockge_stacks_directory }}:rw"
          - "/etc/timezone:/etc/timezone:ro"
        env:
          DOCKGE_STACKS_DIR: "{{ dockge_stacks_directory }}"
        ports: 
          - "{{ dockge_port }}:{{ container_dockge_port }}"
        restart_policy: unless-stopped
        memory: "{{ dockge_memory }}"
        labels:
          traefik.enable: "{{ dockge_available_externally | string }}"
          traefik.http.routers.dockge.rule: "Host(`{{ dockge_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.routers.dockge.tls.certresolver: "letsencrypt"
          traefik.http.routers.dockge.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.dockge.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.dockge.loadbalancer.server.port: "9443"
          traefik.http.routers.dockge.middlewares: "dockge-ipwhitelist@docker"
          traefik.http.middlewares.dockge-ipwhitelist.ipwhitelist.sourcerange: "{{ dockge_ip_whitelist }}"
    
    - name: Check that Docker compose file exists
      ansible.builtin.stat:
        path: /tmp/docker-compose.yml
      register: stat_result

    - name: Copy Docker compose to Stacks directory if it exists
      ansible.builtin.copy:
        path: "/tmp/docker-compose.yml"
        dest: "{{ dockge_stacks_directory }}/docker-compose.yml"
      delegate_to: localhost
      when: stat_result.stat.exists

  when: dockge_enabled is true

- name: Stop Dockge
  block:
    - name: Stop Dockge
      community.docker.docker_container:
        name: "{{ dockge_container_name }}"
        state: absent
  when: dockge_enabled is false
