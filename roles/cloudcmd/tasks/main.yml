---
- name: Start Cloudcmd
  block:
    - name: Create Cloudcmd Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ cloudcmd_data_directory }}"

    - name: Create Cloudcmd Docker Container
      community.docker.docker_container:
        name: "{{ cloudcmd_container_name }}"
        image: coderaiser/cloudcmd
        pull: true
        volumes:
          - "{{ cloudcmd_data_directory }}:/config:rw"
          - "{{ cloudcmd_browse_directory }}:/mnt/fs"
        ports: >
              {{
                cloudcmd__ports 
                if lazytainer_cloudcmd_enabled is false else [] 
              }}
        env:
          TZ: "{{ ansible_nas_timezone }}"
          PUID: "{{ cloudcmd_user_id }}"
          PGID: "{{ cloudcmd_group_id }}"
        network_mode: '{{ lazytainer_container if lazytainer_cloudcmd_enabled is true else omit }}'
        restart_policy: unless-stopped
        memory: "{{ cloudcmd_memory }}"
        labels:
          traefik.enable: "{{ cloudcmd_available_externally | string }}"
          traefik.http.routers.cloudcmd.rule: "Host(`{{ cloudcmd_hostname }}.{{ ansible_nas_domain }}`)"
          traefik.http.routers.cloudcmd.tls.certresolver: "letsencrypt"
          traefik.http.routers.cloudcmd.tls.domains[0].main: "{{ ansible_nas_domain }}"
          traefik.http.routers.cloudcmd.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
          traefik.http.services.cloudcmd.loadbalancer.server.port: "8000"
          lazytainer.group: "cloudcmd"
  when: cloudcmd_enabled is true

- name: Stop Cloudcmd
  block:
    - name: Stop Cloudcmd
      community.docker.docker_container:
        name: "{{ cloudcmd_container_name }}"
        state: absent
  when: cloudcmd_enabled is false
